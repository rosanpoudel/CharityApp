syntax = "proto3";
package brilltech.maaser.rpc;

option java_package = "com.brilltech.maaser.rpc";
option java_outer_classname = "CampaignRpcProto";

import "treeleaf.proto";
import "campaign.proto";
import "auth.proto";

message CampaignBaseRequest{
  string refId = 1;
  string stringValue = 2;
  repeated string stringValues = 3;
  int32 intValue = 4;
  int64 longValue = 5;
  bool boolValue = 6;
  bool doubleValue = 7;
  treeleaf.protos.Debug debug = 8;
  brilltech.maaser.entities.Authorization authorization = 9;
  brilltech.maaser.entities.Campaign campaign = 10;
  brilltech.maaser.entities.SubCampaign subCampaign = 11;
  brilltech.maaser.entities.CampaignFilter campaignFilter = 12;
  brilltech.maaser.entities.Comment comment = 13;
}

message CampaignBaseResponse{
  bool error = 1;
  string msg = 2;
  treeleaf.protos.ErrorCode errorCode = 3;
  bool success = 4;
  int64 timestamp = 5;
  treeleaf.protos.Debug debug = 6;
  brilltech.maaser.entities.Campaign campaign = 7;
  repeated brilltech.maaser.entities.Campaign campaigns = 8;
  brilltech.maaser.entities.SubCampaign subCampaign = 9;
  repeated brilltech.maaser.entities.SubCampaign subCampaigns = 10;
  brilltech.maaser.entities.Comment comment = 11;
  repeated brilltech.maaser.entities.Comment comments = 12;
  string campaignUrl = 13;
}

service CampaignRpc{
    //input: Authorization, Campaign; Output: CampaignBaseResponse
    rpc addCampaign(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, Campaign; Output: CampaignBaseResponse
    rpc updateCampaign(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, SubCampaign; Output: CampaignBaseResponse
    rpc addSubCampaign(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, SubCampaign; Output: CampaignBaseResponse
    rpc updateSubCampaign(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input:Authorization, StatusType; Output: CampaignBaseResponse
    rpc updateSubCampaignStatus(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, SubCampaignId; Output: CampaignBaseResponse
    rpc getSubCampaignById(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input:Authorization, StatusType; Output: CampaignBaseResponse
    rpc updateCampaignStatus(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, AccountId; Output: CampaignBaseResponse
    rpc getCampaignsByAccountId(CampaignBaseRequest) returns (CampaignBaseResponse){}; //Your Campaigns
    //input: Authorization, CampaignId; Output: CampaignBaseResponse
    rpc getCampaignById(CampaignBaseRequest) returns (CampaignBaseResponse){}; 
    //input: Authorization; Output: CampaignBaseResponse
    rpc getCampaigns(CampaignBaseRequest) returns (CampaignBaseResponse){}; //Available Campaigns
    //input: Authorization, AccountId; Output: CampaignBaseResponse
    rpc getSubCampaignsByAccountId(CampaignBaseRequest) returns (CampaignBaseResponse){}; //Your Sub Campaigns

    //input: Authorization, Comment; Output: CampaignBaseResponse
    rpc addComment(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, Comment; Output: CampaignBaseResponse
    rpc updateComment(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, commentId; Output: CampaignBaseResponse
    rpc getCommentById(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization; Output: CampaignBaseResponse
    rpc getCommentsByRefId(CampaignBaseRequest) returns (CampaignBaseResponse){};
    //input: Authorization, commentId; Output: CampaignBaseResponse
    rpc deleteComment(CampaignBaseRequest) returns (CampaignBaseResponse){};

    //input: Authorization, campaignId; Output: CampaignBaseResponse
    rpc generateCampaignUrl(CampaignBaseRequest) returns (CampaignBaseResponse){};
}